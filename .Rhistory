theme(axis.text.x = element_text(angle = 45, hjust = 1))
d %>%
group_by(mw, survey_platform) %>%
summarize(year_month_day = unique(year_month_day),
count = length(unique(id))) %>%
mutate(survey_platform = recode(survey_platform, `sm_volunteer` = 'Platform A',
`sm_paid` = 'Platform B', `pollfish` = 'Platform C')) %>%
ggplot(aes(x = reorder(year_month_day, mw), y = count,
color=survey_platform, group=survey_platform)) +
geom_line() +
geom_point() +
labs(
x = 'Date',
y = 'Number of responses',
color = 'Survey platform'
) +
ylim(0, 450) +
scale_x_discrete(labels = dates, breaks = dates) +
scale_color_manual(values = qual[c(1, 4, 5)]) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
d %>%
group_by(mw, survey_platform) %>%
summarize(year_month_day = unique(year_month_day),
count = length(unique(id))) %>%
mutate(survey_platform = recode(survey_platform, `sm_volunteer` = 'Platform A',
`sm_paid` = 'Platform B', `pollfish` = 'Platform C')) %>%
ggplot(aes(x = reorder(year_month_day, mw), y = count,
color=survey_platform, group=survey_platform)) +
geom_line() +
geom_point() +
labs(
x = 'Date',
y = 'Number of responses',
color = 'Survey platform'
) +
ylim(0, 450) +
scale_x_discrete(labels = dates, breaks = dates) +
scale_color_manual(values = qual[c(1, 4, 5)]) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = 'bottom')
d %>%
group_by(mw, survey_platform) %>%
summarize(year_month_day = unique(year_month_day),
count = length(unique(id))) %>%
mutate(survey_platform = recode(survey_platform, `sm_volunteer` = 'Platform A',
`sm_paid` = 'Platform B', `pollfish` = 'Platform C')) %>%
ggplot(aes(x = reorder(year_month_day, mw), y = count,
color=survey_platform, group=survey_platform)) +
geom_line() +
geom_point() +
labs(
x = 'Date',
y = 'Number of responses',
color = 'Survey platform'
) +
ylim(0, 450) +
scale_x_discrete(labels = dates, breaks = dates) +
scale_color_manual(values = qual[c(1, 4, 5)]) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = c(.8, .9))
d %>%
group_by(mw, survey_platform) %>%
summarize(year_month_day = unique(year_month_day),
count = length(unique(id))) %>%
mutate(survey_platform = recode(survey_platform, `sm_volunteer` = 'Platform A',
`sm_paid` = 'Platform B', `pollfish` = 'Platform C')) %>%
ggplot(aes(x = reorder(year_month_day, mw), y = count,
color=survey_platform, group=survey_platform)) +
geom_line() +
geom_point() +
labs(
x = 'Date',
y = 'Number of responses',
color = 'Survey platform'
) +
ylim(0, 450) +
scale_x_discrete(labels = dates, breaks = dates) +
scale_color_manual(values = qual[c(1, 4, 5)]) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = c(.8, .8))
head(census)
scales::show_col(paletteer_d('nord::nord'))
library(paletteer)
scales::show_col(paletteer_d('nord::nord'))
sequ <- colorRampPalette(paletteer_d('nord::silver_mine'))(100)
library(scales)
show_col(sequ)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(DT)
library(reactable)
library(scales)
knitr::opts_chunk$set(collapse = TRUE, cache=FALSE, out.width="100%")
qual <- paletteer_d('nord::aurora')
sequ <- colorRampPalette(paletteer_d('nord::silver_mine'))(100)
d <- read.csv('post_data/covid_perceptions.csv')
census <- read.csv('post_data/nst-est2019-alldata.csv')
# --- FORMAT DATA --- #
exclude <- c('', 'district of columbia', 'unknown', 'other (please specify)')
colnames(census) <- tolower(colnames(census))
census <- census %>%
select(name, popestimate2019) %>%
rename(state=name) %>%
mutate(state = tolower(state))
d <- d %>%
mutate(id = 1:nrow(.)) %>%
relocate(id, .before = start.date) %>%
select(-respondent.id) %>%
gather(question, response, q1:q44) %>%
filter(question %in% paste0('q', 1:21),
!state %in% exclude) %>%
filter(!is.na(response)) %>%
mutate(question = as.integer(str_replace(question, 'q', '')),
response = as.integer(response))
uspop <- sum(census[census$state %in% unique(d$state),]$popestimate2019)
census <- census %>%
mutate(pop_prop = census$popestimate2019 / uspop) %>%
filter(state %in% unique(d$state))
# Make observed state proportions
N <- length(unique(d$id))
census <- d %>%
group_by(state, id) %>%
summarize(n()) %>%
group_by(state) %>%
summarize(count = n()) %>%
mutate(obs_prop = count / N) %>%
inner_join(census)
d %>%
group_by(mw, survey_platform) %>%
summarize(year_month_day = unique(year_month_day),
count = length(unique(id))) %>%
mutate(survey_platform = recode(survey_platform, `sm_volunteer` = 'Platform A',
`sm_paid` = 'Platform B', `pollfish` = 'Platform C')) %>%
ggplot(aes(x = reorder(year_month_day, mw), y = count,
color=survey_platform, group=survey_platform)) +
geom_line(linesize = 1.5) +
geom_point() +
labs(
x = 'Date',
y = 'Number of responses',
color = 'Survey platform'
) +
ylim(0, 450) +
scale_x_discrete(labels = dates, breaks = dates) +
scale_color_manual(values = qual[c(1, 4, 5)]) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = c(.8, .8))
d %>%
group_by(mw, survey_platform) %>%
summarize(year_month_day = unique(year_month_day),
count = length(unique(id))) %>%
mutate(survey_platform = recode(survey_platform, `sm_volunteer` = 'Platform A',
`sm_paid` = 'Platform B', `pollfish` = 'Platform C')) %>%
ggplot(aes(x = reorder(year_month_day, mw), y = count,
color=survey_platform, group=survey_platform)) +
geom_line(linesize = 1.5) +
geom_point() +
labs(
x = 'Date',
y = 'Number of responses',
color = 'Survey platform'
) +
ylim(0, 450) +
scale_x_discrete(labels = dates, breaks = dates) +
scale_color_manual(values = qual[c(1, 4, 5)]) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = c(.8, .8))
d %>%
group_by(mw, survey_platform) %>%
summarize(year_month_day = unique(year_month_day),
count = length(unique(id))) %>%
mutate(survey_platform = recode(survey_platform, `sm_volunteer` = 'Platform A',
`sm_paid` = 'Platform B', `pollfish` = 'Platform C')) %>%
ggplot(aes(x = reorder(year_month_day, mw), y = count,
color=survey_platform, group=survey_platform)) +
geom_line(linesize = 2) +
geom_point() +
labs(
x = 'Date',
y = 'Number of responses',
color = 'Survey platform'
) +
ylim(0, 450) +
scale_x_discrete(labels = dates, breaks = dates) +
scale_color_manual(values = qual[c(1, 4, 5)]) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = c(.8, .8))
d %>%
group_by(mw, survey_platform) %>%
summarize(year_month_day = unique(year_month_day),
count = length(unique(id))) %>%
mutate(survey_platform = recode(survey_platform, `sm_volunteer` = 'Platform A',
`sm_paid` = 'Platform B', `pollfish` = 'Platform C')) %>%
ggplot(aes(x = reorder(year_month_day, mw), y = count,
color=survey_platform, group=survey_platform)) +
geom_line(size = 2) +
geom_point() +
labs(
x = 'Date',
y = 'Number of responses',
color = 'Survey platform'
) +
ylim(0, 450) +
scale_x_discrete(labels = dates, breaks = dates) +
scale_color_manual(values = qual[c(1, 4, 5)]) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = c(.8, .8))
d %>%
group_by(mw, survey_platform) %>%
summarize(year_month_day = unique(year_month_day),
count = length(unique(id))) %>%
mutate(survey_platform = recode(survey_platform, `sm_volunteer` = 'Platform A',
`sm_paid` = 'Platform B', `pollfish` = 'Platform C')) %>%
ggplot(aes(x = reorder(year_month_day, mw), y = count,
color=survey_platform, group=survey_platform)) +
geom_line(size = 1.5) +
geom_point() +
labs(
x = 'Date',
y = 'Number of responses',
color = 'Survey platform'
) +
ylim(0, 450) +
scale_x_discrete(labels = dates, breaks = dates) +
scale_color_manual(values = qual[c(1, 4, 5)]) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = c(.8, .8))
d %>%
group_by(mw, survey_platform) %>%
summarize(year_month_day = unique(year_month_day),
count = length(unique(id))) %>%
mutate(survey_platform = recode(survey_platform, `sm_volunteer` = 'Platform A',
`sm_paid` = 'Platform B', `pollfish` = 'Platform C')) %>%
ggplot(aes(x = reorder(year_month_day, mw), y = count,
color=survey_platform, group=survey_platform)) +
geom_line(size = 1.2) +
geom_point() +
labs(
x = 'Date',
y = 'Number of responses',
color = 'Survey platform'
) +
ylim(0, 450) +
scale_x_discrete(labels = dates, breaks = dates) +
scale_color_manual(values = qual[c(1, 4, 5)]) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = c(.8, .8))
d %>%
group_by(mw, survey_platform) %>%
summarize(year_month_day = unique(year_month_day),
count = length(unique(id))) %>%
mutate(survey_platform = recode(survey_platform, `sm_volunteer` = 'Platform A',
`sm_paid` = 'Platform B', `pollfish` = 'Platform C')) %>%
ggplot(aes(x = reorder(year_month_day, mw), y = count,
color=survey_platform, group=survey_platform)) +
geom_line() +
geom_point() +
labs(
x = 'Date',
y = 'Number of responses',
color = 'Survey platform'
) +
ylim(0, 450) +
scale_x_discrete(labels = dates, breaks = dates) +
scale_color_manual(values = qual[c(1, 4, 5)]) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = c(.8, .8))
head(census)
census %>%
mutate(state_title = str_to_title(state)) %>%
head()
ggplot()
census %>%
mutate(state_title = str_to_title(state),
diff = abs(obs_prop - pop_prop)) %>%
mutate(outlier = ifelse(diff > quantile(diff, probs = .75), state_title, '')) %>%
head()
census %>%
mutate(state_title = str_to_title(state),
std = uspop * pop_prop * (1 - pop_prop)) %>%
head()
census %>%
mutate(state_title = str_to_title(state),
std = sqrt(uspop * pop_prop * (1 - pop_prop))) %>%
head()
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(DT)
library(reactable)
library(scales)
knitr::opts_chunk$set(collapse = TRUE, cache=FALSE, out.width="100%")
qual <- paletteer_d('nord::aurora')
sequ <- colorRampPalette(paletteer_d('nord::silver_mine'))(100)
d <- read.csv('post_data/covid_perceptions.csv')
census <- read.csv('post_data/nst-est2019-alldata.csv')
# --- FORMAT DATA --- #
exclude <- c('', 'district of columbia', 'unknown', 'other (please specify)')
colnames(census) <- tolower(colnames(census))
census <- census %>%
select(name, popestimate2019) %>%
rename(state=name) %>%
mutate(state = tolower(state))
d <- d %>%
mutate(id = 1:nrow(.)) %>%
relocate(id, .before = start.date) %>%
select(-respondent.id) %>%
gather(question, response, q1:q44) %>%
filter(question %in% paste0('q', 1:21),
!state %in% exclude) %>%
filter(!is.na(response)) %>%
mutate(question = as.integer(str_replace(question, 'q', '')),
response = as.integer(response))
uspop <- sum(census[census$state %in% unique(d$state),]$popestimate2019)
census <- census %>%
mutate(pop_prop = census$popestimate2019 / uspop) %>%
filter(state %in% unique(d$state))
# Make observed state proportions
N <- length(unique(d$id))
census <- d %>%
group_by(state, id) %>%
summarize(n()) %>%
group_by(state) %>%
summarize(count = n()) %>%
mutate(obs_prop = count / N,
observed = N) %>%
inner_join(census)
census %>%
mutate(state_title = str_to_title(state),
std = sqrt(uspop * pop_prop * (1 - pop_prop)),
expected = pop_prop * N) %>%
head()
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(DT)
library(reactable)
library(scales)
knitr::opts_chunk$set(collapse = TRUE, cache=FALSE, out.width="100%")
qual <- paletteer_d('nord::aurora')
sequ <- colorRampPalette(paletteer_d('nord::silver_mine'))(100)
d <- read.csv('post_data/covid_perceptions.csv')
census <- read.csv('post_data/nst-est2019-alldata.csv')
# --- FORMAT DATA --- #
exclude <- c('', 'district of columbia', 'unknown', 'other (please specify)')
colnames(census) <- tolower(colnames(census))
census <- census %>%
select(name, popestimate2019) %>%
rename(state=name) %>%
mutate(state = tolower(state))
d <- d %>%
mutate(id = 1:nrow(.)) %>%
relocate(id, .before = start.date) %>%
select(-respondent.id) %>%
gather(question, response, q1:q44) %>%
filter(question %in% paste0('q', 1:21),
!state %in% exclude) %>%
filter(!is.na(response)) %>%
mutate(question = as.integer(str_replace(question, 'q', '')),
response = as.integer(response))
uspop <- sum(census[census$state %in% unique(d$state),]$popestimate2019)
census <- census %>%
mutate(pop_prop = census$popestimate2019 / uspop) %>%
filter(state %in% unique(d$state))
# Make observed state proportions
N <- length(unique(d$id))
census <- d %>%
group_by(state, id) %>%
summarize(n()) %>%
group_by(state) %>%
summarize(observed = n()) %>%
mutate(obs_prop = observed / N) %>%
inner_join(census)
census %>%
mutate(state_title = str_to_title(state),
std = sqrt(uspop * pop_prop * (1 - pop_prop)),
expected = pop_prop * N) %>%
head()
census %>%
mutate(state_title = str_to_title(state),
std = sqrt(uspop * pop_prop * (1 - pop_prop)),
expected = pop_prop * N) %>%
head()
census %>%
mutate(state_title = str_to_title(state),
std = sqrt(uspop * pop_prop * (1 - pop_prop)),
expected = pop_prop * N) %>%
relocate(expected, .after = .observed) %>%
head()
census %>%
mutate(state_title = str_to_title(state),
std = sqrt(uspop * pop_prop * (1 - pop_prop)),
expected = pop_prop * N) %>%
relocate(expected, .after = observed) %>%
head()
census %>%
mutate(state_title = str_to_title(state),
std = sqrt(uspop * pop_prop * (1 - pop_prop)),
expected = pop_prop * N) %>%
relocate(expected, .after = observed) %>%
mutate(outlier = ifelse(observed >= std + expected | observed <= expected - std, 'yes', 'no')) %>%
filter(outlier == 'yes') %>%
head()
census %>%
mutate(state_title = str_to_title(state),
expected = pop_prop * N) %>%
head()
census %>%
mutate(state_title = str_to_title(state),
expected = pop_prop * N) %>%
relocate(expected, .after = observed) %>%
head()
census %>%
mutate(state_title = str_to_title(state),
expected = pop_prop * N) %>%
relocate(expected, .after = observed) %>%
mutate(diff = abs(observed - expected)) %>%
mutate(outlier = ifelse(diff > quantile(diff, probs = .95))) %>%
head()
census %>%
mutate(state_title = str_to_title(state),
expected = pop_prop * N) %>%
relocate(expected, .after = observed) %>%
mutate(diff = abs(observed - expected)) %>%
mutate(outlier = ifelse(diff > quantile(diff, probs = .95), 'yes', 'no')) %>%
head()
census %>%
mutate(state_title = str_to_title(state),
expected = pop_prop * N) %>%
relocate(expected, .after = observed) %>%
mutate(diff = abs(observed - expected)) %>%
mutate(outlier = ifelse(diff > quantile(diff, probs = .95), 'yes', 'no')) %>%
mutate(outlier_label = ifelse(outlier == 'yes', state_title, '')) %>%
ggplot(aes(x = expected, y = observed)) +
geom_point(aes(color = outlier))
census %>%
mutate(state_title = str_to_title(state),
expected = pop_prop * N) %>%
relocate(expected, .after = observed) %>%
mutate(diff = abs(observed - expected)) %>%
mutate(outlier = ifelse(diff > quantile(diff, probs = .95), 'yes', 'no')) %>%
mutate(outlier_label = ifelse(outlier == 'yes', state_title, '')) %>%
ggplot(aes(x = expected, y = observed)) +
geom_point(aes(color = outlier)) +
geom_label(aes(label = outlier_label))
census %>%
mutate(state_title = str_to_title(state),
expected = pop_prop * N) %>%
relocate(expected, .after = observed) %>%
mutate(diff = abs(observed - expected)) %>%
mutate(outlier = ifelse(diff > quantile(diff, probs = .95), 'yes', 'no')) %>%
mutate(outlier_label = ifelse(outlier == 'yes', state_title, NA)) %>%
ggplot(aes(x = expected, y = observed)) +
geom_point(aes(color = outlier)) +
geom_label(aes(label = outlier_label))
census %>%
mutate(state_title = str_to_title(state),
expected = pop_prop * N) %>%
relocate(expected, .after = observed) %>%
mutate(diff = abs(observed - expected)) %>%
mutate(outlier = ifelse(diff > quantile(diff, probs = .95), 'yes', 'no')) %>%
mutate(outlier_label = ifelse(outlier == 'yes', state_title, NA)) %>%
ggplot(aes(x = expected, y = observed)) +
geom_point(aes(color = outlier)) +
ggrepel::geom_label_repel(aes(label = outlier_label))
census %>%
mutate(state_title = str_to_title(state),
expected = pop_prop * N) %>%
relocate(expected, .after = observed) %>%
mutate(diff = abs(observed - expected)) %>%
mutate(outlier = ifelse(diff > quantile(diff, probs = .9), 'yes', 'no')) %>%
mutate(outlier_label = ifelse(outlier == 'yes', state_title, NA)) %>%
ggplot(aes(x = expected, y = observed)) +
geom_point(aes(color = outlier)) +
ggrepel::geom_label_repel(aes(label = outlier_label))
census %>%
mutate(state_title = str_to_title(state),
expected = pop_prop * N) %>%
relocate(expected, .after = observed) %>%
mutate(diff = abs(observed - expected)) %>%
mutate(outlier = ifelse(diff > quantile(diff, probs = .9), 'yes', 'no')) %>%
mutate(outlier_label = ifelse(outlier == 'yes', state_title, NA)) %>%
ggplot(aes(x = expected, y = observed)) +
geom_abline(slope = 1, intercept = 0, linetype = 'dashed') +
geom_point(aes(color = outlier)) +
ggrepel::geom_label_repel(aes(label = outlier_label))
census %>%
mutate(state_title = str_to_title(state),
expected = pop_prop * N) %>%
relocate(expected, .after = observed) %>%
mutate(diff = abs(observed - expected)) %>%
mutate(outlier = ifelse(diff > quantile(diff, probs = .9), 'yes', 'no')) %>%
mutate(outlier_label = ifelse(outlier == 'yes', state_title, NA)) %>%
ggplot(aes(x = expected, y = observed)) +
geom_abline(slope = 1, intercept = 0, linetype = 'dashed') +
geom_point(aes(color = outlier)) +
ggrepel::geom_label_repel(aes(label = outlier_label)) +
ylim(0, 1200) +
xlim(0, 1200)
q()
