xmin = times[1], xmax = times[length(times)], y=1),
alpha = .6, fill = 'green') +
geom_ribbon(aes(ymin = voltage - se, ymax = voltage + se, fill = condition), alpha = .3) +
geom_line(aes(color = condition)) +
labs(
title = 'Heartbeat evoked potential (HEP)',
x = 'Time post heartbeat (s)',
y = latex2exp::TeX('$EEG Voltage~ (\\mu ~V)$'),
color = 'Subjective arousal',
fill = 'Subjective arousal'
) +
scale_color_manual(values = c(Deactivated = low, Activated = high)) +
scale_fill_manual(values = c(Deactivated = low, Activated = high)) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = 'bottom')
g <- ggarrange(ts, topo, labels = c('A.', 'B.'), nrow=2)
print(g)
# --- TOP PANEL --- #
# Individual-level correlations between HEP effect size and survey response
# Select correct data
channels_s <- m$result$channels[m$result$clusters[[2]][[2]] + 1]
times_s <- m$result$times[m$result$clusters[[2]][[1]] + 1]
cluster <- data.frame(time = times_s, channel = channels_s)
cluster$string <- paste(cluster$time, cluster$channel, sep='_')
survey <- read.csv('post_data/MW_EEG_survey.csv')
survey <- survey[, c('subj_id', 'GAD7_Score', 'STAI_Score')]
colnames(survey) <- c('subject', 'gad', 'stai')
d <- m$eeg
# Select appropriate (significant) cluster
hep_s <- d %>%
gather(channel, voltage, Fp1:POz) %>%
mutate(string = paste(time, channel, sep='_')) %>%
filter(string %in% cluster$string, channel %in% channels_s) %>%
group_by(subject, condition) %>%
summarize(voltage = mean(voltage)) %>%
mutate(condition = ifelse(condition == 'Activated', 'High Arousal', 'Low Arousal')) %>%
inner_join(survey)
# Make general summarized data
t <- hep_s %>%
spread(condition, voltage) %>%
mutate(hep = `Low Arousal` - `High Arousal`) %>%
select(-`High Arousal`, -`Low Arousal`) %>%
gather(survey, response, gad,stai) %>%
mutate(survey = recode(survey, `gad` = 'Trait anxiety', `stai` = 'State anxiety'))
# Compute group-level correlations
cr <- t %>%
group_by(survey) %>%
summarize(r = cor.test(hep, response)$estimate,
df = cor.test(hep, response)$parameter,
p = cor.test(hep, response)$p.value,
ci_h = cor.test(hep, response)$conf.int[1],
ci_l = cor.test(hep, response)$conf.int[2]) %>%
mutate(label = paste0('r(', df, ') = ', round(r, 3), '\n95% CI = [', round(ci_l, 3), ', ',
round(ci_h, 3), ']\np = ', round(p, 3)),
hep = c(-.5, -.5), response = c(39, 10), survey = c('State anxiety', 'Trait anxiety'))
# Visualize correlations
p1 <- t %>%
filter(!is.na(response)) %>%
ggplot(aes(x = response, hep)) +
geom_point() +
geom_smooth(method = 'lm') +
facet_wrap(~survey, scales = 'free_x') +
geom_text(data = cr, aes(label = label), hjust = 0, size = 3) +
labs(
x = 'Survey response',
y = 'Participant-specific\nHEP effect size'
) +
ylim(-1, 1) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_rect(fill = NA, color = 'black'),
axis.ticks = element_blank())
# --- PANEL 2 --- #
# Visualize median split on EEG timeseries
# Keep relevant columns
channels_s <- unique(channels_s)
d <- m$eeg
mask1 <- colnames(d) %in% c('subject', 'condition', 'time')
mask2 <- colnames(d) %in% channels_s
d <- d[, (mask1 | mask2)]
# Plot
p2 <- d %>%
inner_join(survey[,c('subject', 'stai')]) %>%
filter(!is.na(stai), time %in% times) %>%
mutate(stai_d = ifelse(stai > median(stai), 'High state anxiety', 'Low state anxiety')) %>%
gather(channel, voltage, Fp1:FC5) %>%
group_by(subject, time, condition, stai_d) %>%
summarize(voltage_ = mean(voltage)) %>%
group_by(time, condition, stai_d) %>%
summarize(voltage = mean(voltage_), se = sd(voltage_) / n()) %>%
mutate(stai_d = factor(stai_d, levels = c('Low state anxiety', 'High state anxiety'))) %>%
ggplot(aes(x = time, y = voltage)) +
geom_ribbon(aes(ymin = voltage - se, ymax = voltage + se, fill = condition), alpha = .3) +
geom_line(aes(color = condition)) +
facet_wrap(~stai_d) +
labs(
x = 'Time post heartbeat (s)',
y = latex2exp::TeX('$EEG~voltage~(\\mu ~V)$'),
fill = 'Subjective arousal',
color = 'Subjective arousal'
) +
scale_color_manual(values = c(`Activated` = high, `Deactivated` = low)) +
scale_fill_manual(values = c(`Activated` = high, `Deactivated` = low)) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_rect(fill = NA, color = 'black'),
axis.ticks = element_blank(),
legend.position = 'bottom')
g <- ggarrange(p1, p2, labels = c('A.', 'B.'), nrow = 2)
print(g)
q()
blogdown::serve_site()
blogdown::build_site()
q()
blogdown::serve_site()
blogdown::build_site()
q()
blogdown::serve_site()
blogdown::build_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
q()
blogdown::serve_site()
q()
blogdown::serve_site()
q()
blogdown::serve_site()
library(tidyverse)
library(RColorBrewer)
sev <- function(rew) {
return(b_j + rew*a_j)
}
per <- function(p) {
return(p)
}
cost <- function(pl_e) {
return(exp((pl_e * c_j)/e_j)-1)
}
V <- function(pl_e, pl_p, p, rew) {
return(-sev(rew) * per(p) * (1 - pl_p) - cost(pl_e))
}
softmax <- function(z) {
out <- c()
count <- 0
den <- sum(exp(z))
for (e in z) {
count <- count + 1
out[count] <- exp(e) / den
}
return(out)
}
a_j <- 8
c_j <- .5
e_j <- 1
b_j <- 0
d <- expand.grid(pl_e = seq(0, 5, by = .01), plan_slope = seq(0, .2, .02))
d$pl_p <- d$pl_e * d$plan_slope
d$v <- with(d, V(pl_e, pl_p, rew = 6, p = .5))
maxes <- d %>%
group_by(plan_slope) %>%
filter(v == max(v)) %>%
mutate(a_j = factor(a_j, levels = c('low', 'high'))) %>%
mutate(a_j = recode(a_j, `low` = 'Low Reward Sensitivity', `high` = 'High Reward Sensitivity'))
colors <- c(
'#616365',
'#696e71',
'#70787d',
'#788389',
'#808e96',
'#899aa4',
'#92a7b3',
'#9cb5c4',
'#a7c5d6'
)
blues <- rev(brewer.pal(9, 'Blues'))[1:7]
scales::show_col(blues)
d %>%
group_by(plan_slope) %>%
summarize(proba = softmax(v), pl_e = pl_e) %>%
ggplot(aes(x = pl_e, y = proba, group = plan_slope)) +
geom_ribbon(aes(ymin = 0, ymax = proba, fill = plan_slope), alpha = .6) +
geom_line(aes(color = plan_slope)) +
labs(
x = 'Plan Effort',
y = 'Probability of Choice',
color = 'Security Plan Efficacy',
fill ='Security Plan Efficacy',
) +
scale_fill_gradientn(colors = blues) +
scale_color_gradientn(colors = blues) +
theme_void() +
theme(axis.ticks = element_blank(),
legend.text = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank(),
legend.position = 'none',
text = element_text(size = 8),
legend.title = element_text(size = 6),
panel.border = element_blank(),
plot.tag.position = c(.002, 1),
plot.tag = element_text(size = 10),
panel.background = element_rect(fill = 'transparent', color = NA),
plot.margin = unit(c(0, 0, 0, 0), 'pt'))
d %>%
group_by(plan_slope) %>%
summarize(proba = softmax(v), pl_e = pl_e) %>%
ggplot(aes(x = pl_e, y = proba, group = plan_slope)) +
geom_ribbon(aes(ymin = 0, ymax = proba, fill = plan_slope), alpha = .6) +
geom_line(aes(color = plan_slope)) +
labs(
x = 'Plan Effort',
y = 'Probability of Choice',
color = 'Security Plan Efficacy',
fill ='Security Plan Efficacy',
) +
scale_fill_gradientn(colors = blues) +
scale_color_gradientn(colors = blues) +
theme_void() +
theme(axis.ticks = element_blank(),
legend.text = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank(),
legend.position = 'none',
text = element_text(size = 8),
legend.title = element_text(size = 6),
panel.border = element_blank(),
plot.tag.position = c(.002, 1),
plot.tag = element_text(size = 10),
panel.background = element_rect(fill = '#fdfcf9', color = NA),
plot.margin = unit(c(0, 0, 0, 0), 'pt'))
ggsave('static/images/about_background.png', height = 1440, width = 2560, units = 'px', dpi = 300)
p1
library(tidyverse)
library(RColorBrewer)
sev <- function(rew) {
return(b_j + rew*a_j)
}
per <- function(p) {
return(p)
}
cost <- function(pl_e) {
return(exp((pl_e * c_j)/e_j)-1)
}
V <- function(pl_e, pl_p, p, rew) {
return(-sev(rew) * per(p) * (1 - pl_p) - cost(pl_e))
}
softmax <- function(z) {
out <- c()
count <- 0
den <- sum(exp(z))
for (e in z) {
count <- count + 1
out[count] <- exp(e) / den
}
return(out)
}
a_j <- 8
c_j <- .5
e_j <- 1
b_j <- 0
d <- expand.grid(pl_e = seq(0, 5, by = .01), plan_slope = seq(0, .2, .02))
d$pl_p <- d$pl_e * d$plan_slope
d$v <- with(d, V(pl_e, pl_p, rew = 6, p = .5))
maxes <- d %>%
group_by(plan_slope) %>%
filter(v == max(v)) %>%
mutate(a_j = factor(a_j, levels = c('low', 'high'))) %>%
mutate(a_j = recode(a_j, `low` = 'Low Reward Sensitivity', `high` = 'High Reward Sensitivity'))
colors <- c(
'#616365',
'#696e71',
'#70787d',
'#788389',
'#808e96',
'#899aa4',
'#92a7b3',
'#9cb5c4',
'#a7c5d6'
)
blues <- rev(brewer.pal(9, 'Blues'))[1:7]
scales::show_col(blues)
d %>%
group_by(plan_slope) %>%
summarize(proba = softmax(v), pl_e = pl_e) %>%
ggplot(aes(x = pl_e, y = proba, group = plan_slope)) +
geom_ribbon(aes(ymin = 0, ymax = proba, fill = plan_slope), alpha = .6) +
geom_line(aes(color = plan_slope)) +
labs(
x = 'Plan Effort',
y = 'Probability of Choice',
color = 'Security Plan Efficacy',
fill ='Security Plan Efficacy',
) +
scale_fill_gradientn(colors = blues) +
scale_color_gradientn(colors = blues) +
theme_void() +
theme(axis.ticks = element_blank(),
legend.text = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank(),
legend.position = 'none',
text = element_text(size = 8),
legend.title = element_text(size = 6),
panel.border = element_blank(),
plot.tag.position = c(.002, 1),
plot.tag = element_text(size = 10),
panel.background = element_rect(fill = '#fdfcf9', color = NA),
plot.margin = unit(c(0, 0, 0, 0), 'pt'))
ggsave('static/images/about_background.png', height = 1440*1.2, width = 2560*1.2, units = 'px', dpi = 300)
blogdown::stop_server()
blogdown::serve_site()
library(tidyverse)
library(RColorBrewer)
sev <- function(rew) {
return(b_j + rew*a_j)
}
per <- function(p) {
return(p)
}
cost <- function(pl_e) {
return(exp((pl_e * c_j)/e_j)-1)
}
V <- function(pl_e, pl_p, p, rew) {
return(-sev(rew) * per(p) * (1 - pl_p) - cost(pl_e))
}
softmax <- function(z) {
out <- c()
count <- 0
den <- sum(exp(z))
for (e in z) {
count <- count + 1
out[count] <- exp(e) / den
}
return(out)
}
a_j <- 8
c_j <- .5
e_j <- 1
b_j <- 0
d <- expand.grid(pl_e = seq(0, 5, by = .01), plan_slope = seq(0, .2, .02))
d$pl_p <- d$pl_e * d$plan_slope
d$v <- with(d, V(pl_e, pl_p, rew = 6, p = .5))
maxes <- d %>%
group_by(plan_slope) %>%
filter(v == max(v)) %>%
mutate(a_j = factor(a_j, levels = c('low', 'high'))) %>%
mutate(a_j = recode(a_j, `low` = 'Low Reward Sensitivity', `high` = 'High Reward Sensitivity'))
colors <- c(
'#616365',
'#696e71',
'#70787d',
'#788389',
'#808e96',
'#899aa4',
'#92a7b3',
'#9cb5c4',
'#a7c5d6'
)
blues <- rev(brewer.pal(9, 'Blues'))[1:7]
scales::show_col(blues)
d %>%
group_by(plan_slope) %>%
summarize(proba = softmax(v), pl_e = pl_e) %>%
ggplot(aes(x = pl_e, y = proba, group = plan_slope)) +
geom_ribbon(aes(ymin = 0, ymax = proba, fill = plan_slope), alpha = .6) +
geom_line(aes(color = plan_slope)) +
labs(
x = 'Plan Effort',
y = 'Probability of Choice',
color = 'Security Plan Efficacy',
fill ='Security Plan Efficacy',
) +
scale_fill_gradientn(colors = blues) +
scale_color_gradientn(colors = blues) +
theme_void() +
theme(axis.ticks = element_blank(),
legend.text = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank(),
legend.position = 'none',
text = element_text(size = 8),
legend.title = element_text(size = 6),
panel.border = element_blank(),
plot.tag.position = c(.002, 1),
plot.tag = element_text(size = 10),
panel.background = element_rect(fill = '#fcf8f2', color = NA),
plot.margin = unit(c(0, 0, 0, 0), 'pt'))
ggsave('static/images/about_background.png', height = 1440*1.2, width = 2560*1.2, units = 'px', dpi = 300)
blogdown::build_site()
q()
blogdown::serve_site()
q()
blogdown::serve_site()
getwd()
library(tidyverse)
library(ggridges)
library(RColorBrewer)
library(BayesFactor)
library(scales)
library(tidytext)
knitr::opts_chunk$set(collapse = TRUE, cache=FALSE, out.width="100%")
getwd()
q()
blogdown:::preview_site()
q()
blogdown::serve_site()
q()
blogdown::serve_site()
q()
blogdown::serve_site()
scales::show_col('#F4F5F7')
blogdown::stop_server()
blogdown::serve_site()
library(tidyverse)
library(RColorBrewer)
library(paletteer)
knitr::opts_chunk$set(collapse = TRUE, cache=FALSE, out.width="100%")
pal <- paletteer_d('severance::Hell')
show_col(pal)
scales::show_col(pal)
d <- read.csv('post_data/covid_perceptions.csv')
head(d)
head(d)
unique(d$year_month_day)
unique(d$ew)
sort(unique(d$ew0)
sort(unique(d$ew))
length(unique(d$ew))
library(DT)
qs <- read.csv('post_data/question_coding.csv')
colnames(qs) <- c('drop', 'Question')
datatable(qs[,'Question])
datatable(qs[,'Question'])
datatable(data.frame(qs[,'Question']))
qs <- read.csv('post_data/question_coding.csv')
colnames(qs) <- c('drop', 'Question')
datatable(data.frame(qs[,'Question']))
qs <- read.csv('post_data/question_coding.csv')
qs <- read.csv('post_data/question_coding.csv')
colnames(qs) <- c('drop', 'drop', 'Preface', 'Question')
datatable(data.frame(qs[,c('Preface', 'Question')]))
hist(rnorm(100))
blogdown::stop_server()
q()
blogdown::serve_site()
library(reactable)
install.packages('"reactable"')
install.packages('reactable')
library(reactable)
qs <- read.csv('post_data/question_coding.csv')
colnames(qs) <- c('drop', 'drop', 'Preface', 'Question')
reactable(data.frame(qs[,c('Preface', 'Question')]),
searchable=FALSE,
sortable=FALSE,
highlight=TRUE,
pagination=TRUE,
theme = reactableTheme(
backgroundColor = 'transparent',
color = 'inherit',
borderColor = 'transparent',
stripedColor = 'rgba(0, 0, 0 0.02)'
))
qs <- read.csv('post_data/question_coding.csv')
colnames(qs) <- c('drop', 'drop', 'Preface', 'Question')
reactable(
qs[,c('Preface', 'Question')],
searchable = FALSE,
sortable = FALSE,
highlight = TRUE,
pagination = TRUE,
paginationType = "numbers",         # horizontal page numbers (default)
showPageSizeOptions = FALSE,        # hide dropdown
defaultPageSize = 10,
theme = reactableTheme(
backgroundColor = "transparent",  # let it inherit from the page
color = "inherit",
borderColor = "transparent",
highlightColor = "rgba(0, 0, 0, 0.05)",
stripedColor = "rgba(0, 0, 0, 0.02)",
style = list(fontSize = "0.95em"),
pageButtonStyle = list(
background = "transparent",
color = "inherit",
border = "1px solid #ccc",
borderRadius = "4px",
padding = "4px 8px",
margin = "0 2px"
),
pageButtonHoverStyle = list(
background = "#ddd"
),
pageButtonActiveStyle = list(
background = "#bbb",
fontWeight = "bold"
)
)
)
q()
