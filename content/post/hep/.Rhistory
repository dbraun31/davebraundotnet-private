pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
alpha = .01, fill = 'steelblue') +
geom_line(aes(color = condition))
head(pd)
min(c(2,4,5), c(1,2,4))
pmin(c(2,4,5), c(1,2,4))
pd <- d %>%
gather(channel, voltage, Fp1:POz) %>%
filter(channel %in% channels) %>%
group_by(subject, condition, time) %>%
summarize(voltage_ = mean(voltage)) %>%
group_by(condition, time) %>%
summarize(voltage = mean(voltage_), se = sd(voltage_) / sqrt(N)) %>%
spread(condition, voltage) %>%
mutate(ribbon = pmin(Activated, Deactivated)) %>%
gather(condition, voltage, Activated, Deactivated)
head(pd)
rib <- pd %>%
filter(time %in% times) %>%
group_by(time) %>%
summarize(ymin = min(voltage), ymax = max(voltage))
head(rub)
head(rib)
rib <- pd %>%
filter(time %in% times) %>%
group_by(time) %>%
summarize(ymin = min(voltage, na.rm = TRUE), ymax = max(voltage, na.rm = TRUE))
head(rib)
times
pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
alpha = .01, fill = 'steelblue') +
geom_ribbon(data = rib, aes(ymin = ymin, ymax = ymax, xmin = times[1], xmax = times[length(times)]),
alpha = .2, fill = 'grey') +
geom_line(aes(color = condition))
rib <- pd %>%
filter(time %in% times) %>%
group_by(time) %>%
summarize(ymin = min(voltage, na.rm = TRUE), ymax = max(voltage, na.rm = TRUE))
pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
alpha = .01, fill = 'steelblue') +
geom_ribbon(data = rib, aes(ymin = ymin, ymax = ymax, xmin = times[1], xmax = times[length(times)]),
alpha = .2, fill = 'grey') +
geom_line(aes(color = condition))
rib <- pd %>%
filter(time %in% times) %>%
group_by(time) %>%
summarize(ymin = min(voltage, na.rm = TRUE), ymax = max(voltage, na.rm = TRUE), voltage=1)
pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
alpha = .01, fill = 'steelblue') +
geom_ribbon(data = rib, aes(ymin = ymin, ymax = ymax, xmin = times[1], xmax = times[length(times)]),
alpha = .2, fill = 'grey') +
geom_line(aes(color = condition))
pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
alpha = .01, fill = 'steelblue') +
geom_ribbon(data = rib, aes(ymin = ymin, ymax = ymax,
xmin = times[1], xmax = times[length(times)], y=1),
alpha = .2, fill = 'grey') +
geom_line(aes(color = condition))
pd <- d %>%
gather(channel, voltage, Fp1:POz) %>%
filter(channel %in% channels) %>%
group_by(subject, condition, time) %>%
summarize(voltage_ = mean(voltage)) %>%
group_by(condition, time) %>%
summarize(voltage = mean(voltage_), se = sd(voltage_) / sqrt(N))
rib <- pd %>%
filter(time %in% times) %>%
group_by(time) %>%
summarize(ymin = min(voltage, na.rm = TRUE), ymax = max(voltage, na.rm = TRUE))
pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
alpha = .01, fill = 'steelblue') +
geom_ribbon(data = rib, aes(ymin = ymin, ymax = ymax,
xmin = times[1], xmax = times[length(times)], y=1),
alpha = .2, fill = 'grey') +
geom_line(aes(color = condition))
pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
alpha = .01, fill = 'steelblue') +
geom_ribbon(data = rib, aes(ymin = ymin, ymax = ymax,
xmin = times[1], xmax = times[length(times)], y=1),
alpha = .6, fill = 'grey') +
geom_line(aes(color = condition))
pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
color = 'steelblue') +
geom_ribbon(data = rib, aes(ymin = ymin, ymax = ymax,
xmin = times[1], xmax = times[length(times)], y=1),
alpha = .6, fill = 'grey') +
geom_line(aes(color = condition))
pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
color = 'steelblue', fill = NA) +
geom_ribbon(data = rib, aes(ymin = ymin, ymax = ymax,
xmin = times[1], xmax = times[length(times)], y=1),
alpha = .6, fill = 'grey') +
geom_line(aes(color = condition))
pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
color = 'steelblue', fill = NA) +
geom_ribbon(data = rib, aes(ymin = ymin, ymax = ymax,
xmin = times[1], xmax = times[length(times)], y=1),
alpha = .6, fill = 'grey') +
geom_line(aes(color = condition)) +
labs(
x = 'Time post heartbeat (s)',
y = latex2exp::TeX('$Voltage~\mu~V$'),
pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
color = 'steelblue', fill = NA) +
geom_ribbon(data = rib, aes(ymin = ymin, ymax = ymax,
xmin = times[1], xmax = times[length(times)], y=1),
alpha = .6, fill = 'grey') +
geom_line(aes(color = condition)) +
labs(
x = 'Time post heartbeat (s)',
y = latex2exp::TeX('$Voltage~\\mu~V$'),
color = 'Subjective arousal'
)
pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
color = 'steelblue', fill = NA) +
geom_ribbon(data = rib, aes(ymin = ymin, ymax = ymax,
xmin = times[1], xmax = times[length(times)], y=1),
alpha = .6, fill = 'grey') +
geom_line(aes(color = condition)) +
labs(
x = 'Time post heartbeat (s)',
y = latex2exp::TeX('$Voltage~ \\mu~V$'),
color = 'Subjective arousal'
)
pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
color = 'steelblue', fill = NA) +
geom_ribbon(data = rib, aes(ymin = ymin, ymax = ymax,
xmin = times[1], xmax = times[length(times)], y=1),
alpha = .6, fill = 'grey') +
geom_line(aes(color = condition)) +
labs(
x = 'Time post heartbeat (s)',
y = latex2exp::TeX('$Voltage~ (\\mu ~V)$'),
color = 'Subjective arousal'
)
pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
color = 'steelblue', fill = NA) +
geom_ribbon(data = rib, aes(ymin = ymin, ymax = ymax,
xmin = times[1], xmax = times[length(times)], y=1),
alpha = .6, fill = 'grey') +
geom_line(aes(color = condition)) +
labs(
x = 'Time post heartbeat (s)',
y = latex2exp::TeX('$Voltage~ (\\mu ~V)$'),
color = 'Subjective arousal'
) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = 'bottom')
pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
color = 'steelblue', fill = NA) +
geom_ribbon(data = rib, aes(ymin = ymin, ymax = ymax,
xmin = times[1], xmax = times[length(times)], y=1),
alpha = .6, fill = 'grey') +
geom_ribbon(aes(ymin = voltage - se, ymax = voltage + se, fill = condition)) +
geom_line(aes(color = condition)) +
labs(
x = 'Time post heartbeat (s)',
y = latex2exp::TeX('$Voltage~ (\\mu ~V)$'),
color = 'Subjective arousal',
fill = 'Subjective arousal'
) +
scale_color_manual(values = c(Deactivated = low, Activated = high)) +
scale_fill_manual(values = c(Deactivated = low, Activated = high)) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = 'bottom')
low <- '#FC8D59'
high <- '#91BFDB'
pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
color = 'steelblue', fill = NA) +
geom_ribbon(data = rib, aes(ymin = ymin, ymax = ymax,
xmin = times[1], xmax = times[length(times)], y=1),
alpha = .6, fill = 'grey') +
geom_ribbon(aes(ymin = voltage - se, ymax = voltage + se, fill = condition)) +
geom_line(aes(color = condition)) +
labs(
x = 'Time post heartbeat (s)',
y = latex2exp::TeX('$Voltage~ (\\mu ~V)$'),
color = 'Subjective arousal',
fill = 'Subjective arousal'
) +
scale_color_manual(values = c(Deactivated = low, Activated = high)) +
scale_fill_manual(values = c(Deactivated = low, Activated = high)) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = 'bottom')
pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
color = 'steelblue', fill = NA) +
geom_ribbon(data = rib, aes(ymin = ymin, ymax = ymax,
xmin = times[1], xmax = times[length(times)], y=1),
alpha = .6, fill = 'grey') +
geom_ribbon(aes(ymin = voltage - se, ymax = voltage + se, fill = condition), alpha = .3) +
geom_line(aes(color = condition)) +
labs(
x = 'Time post heartbeat (s)',
y = latex2exp::TeX('$Voltage~ (\\mu ~V)$'),
color = 'Subjective arousal',
fill = 'Subjective arousal'
) +
scale_color_manual(values = c(Deactivated = low, Activated = high)) +
scale_fill_manual(values = c(Deactivated = low, Activated = high)) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = 'bottom')
pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
color = 'steelblue', fill = NA, linetype = 'dashed') +
geom_ribbon(data = rib, aes(ymin = ymin, ymax = ymax,
xmin = times[1], xmax = times[length(times)], y=1),
alpha = .6, fill = 'grey') +
geom_ribbon(aes(ymin = voltage - se, ymax = voltage + se, fill = condition), alpha = .3) +
geom_line(aes(color = condition)) +
labs(
x = 'Time post heartbeat (s)',
y = latex2exp::TeX('$Voltage~ (\\mu ~V)$'),
color = 'Subjective arousal',
fill = 'Subjective arousal'
) +
scale_color_manual(values = c(Deactivated = low, Activated = high)) +
scale_fill_manual(values = c(Deactivated = low, Activated = high)) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = 'bottom')
pd %>%
ggplot(aes(x = time, y = voltage)) +
geom_rect(aes(xmin = .25, xmax = .650, ymin = min(voltage), ymax = max(voltage)),
color = 'steelblue', fill = NA, linetype = 'dashed') +
geom_ribbon(data = rib, aes(ymin = ymin, ymax = ymax,
xmin = times[1], xmax = times[length(times)], y=1),
alpha = .6, fill = 'green') +
geom_ribbon(aes(ymin = voltage - se, ymax = voltage + se, fill = condition), alpha = .3) +
geom_line(aes(color = condition)) +
labs(
x = 'Time post heartbeat (s)',
y = latex2exp::TeX('$Voltage~ (\\mu ~V)$'),
color = 'Subjective arousal',
fill = 'Subjective arousal'
) +
scale_color_manual(values = c(Deactivated = low, Activated = high)) +
scale_fill_manual(values = c(Deactivated = low, Activated = high)) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = 'bottom')
library(ggpubr)
source('visualize_clusters.r')
source("~/Dropbox/post_doc/professional/career/site_stuff/next/content/post/hep/visualize_clusters.r")
# Import Python helper functions
setwd(here())
here()
library(here)
here()
as.string()
as.string(here())
as.character(here())
source("~/Dropbox/post_doc/professional/career/site_stuff/next/content/post/hep/visualize_clusters.r")
library(ggpubr)
source('visualize_clusters.r')
m <- readRDS('cluster_result.rds')
getwd()
library(tidyverse)
library(ggridges)
library(RColorBrewer)
library(BayesFactor)
library(scales)
library(tidytext)
knitr::opts_chunk$set(collapse = TRUE, cache=FALSE, out.width="100%")
knitr::include_graphics("distraction.png")
knitr::include_graphics('eeg_cap.jpg')
knitr::include_graphics('figure1.png')
# Import data
d <- read.csv('MW_EEG_behavioral.csv')
bads <- c(10, 13, 14)
d <- d[!d$subject %in% bads,]
ecg <- read.csv('MW_ECG_summary.csv')
# Mean imputation on very few missing values
d <- d %>%
group_by(subject) %>%
# Mean imputation
mutate(trial = 1:(n()), arou = ifelse(!is.na(arou), arou, mean(arou, na.rm=TRUE))) %>%
ungroup() %>%
select(subject, trial, arou, fut)
# Summarize heart metric
heart <- ecg %>%
rename(trial = probe) %>%
mutate(trial = as.integer(gsub('Probe', '', trial)),
timepoint = sample / 250) %>%
mutate(hr = 60 / (timepoint - lag(timepoint))) %>%
group_by(subject, trial) %>%
summarize(hr = mean(hr, na.rm=TRUE)) %>%
inner_join(d)
# Compute summaries for viz
sd <- heart %>%
gather(metric, measure, hr, fut) %>%
group_by(subject, metric) %>%
summarize(r = cor.test(measure, arou)$estimate,
ci_l = cor.test(measure, arou)$conf.int[1],
ci_h = cor.test(measure, arou)$conf.int[2],
p = cor.test(measure, arou)$p.value) %>%
mutate(sig = case_when(
p < .001 ~ 'p < .001',
p < .01 ~ 'p < .01',
p < .05 ~ 'p < .05',
p >= .05 ~ 'N.S.'
)) %>%
mutate(sig = factor(sig, levels = c('N.S.', 'p < .05', 'p < .01', 'p < .001')))
# ---  COMPUTE AGGREGATE STATS --- #
# Use Fisher Z to transform correlations to unbounded space
fisherz <- function(r) {
return(0.5 * log((1 + r) / (1 - r)))
}
sd$z <- fisherz(sd$r)
N <- length(unique(sd$subject))
# Aggregate correlation statistics
stats <- sd %>%
group_by(metric) %>%
summarize(m = mean(r), se = sd(r) / sqrt(N), t = t.test(r, mu=0)$statistic,
df = t.test(r, mu=0)$parameter, p = t.test(r, mu=0)$p.value,
bf =  (extractBF(ttestBF(r, mu=0))$bf)) %>%
mutate(p_code = ifelse(p < .001, '< .001', paste0('= ', round(p, 3))),
bf = ifelse(metric=='fut', bf, 1 / bf)) %>%
mutate(r = -1, subject = c(1, 24),
label = paste0('p ', p_code, c('\nBF Alt = ', '\nBF Null = '), round(bf, 2)))
metric_order <- c('hr', 'fut')
stats$metric <- factor(stats$metric, levels = metric_order)
stats$metric <- recode(stats$metric, `hr` = 'Heart rate', `fut` = 'Future thinking')
colors <- brewer_pal(palette = 'RdBu')(10)[c(1, 10, 8, 6)]
# Visualize
p3 <- sd %>%
mutate(metric = factor(metric, levels = metric_order)) %>%
mutate(metric = recode(metric, `hr` = 'Heart rate', `fut` = 'Future thinking')) %>%
ggplot(aes(x = reorder_within(subject, r, metric), y = r)) +
geom_hline(yintercept = 0, linetype = 'dashed') +
geom_errorbar(aes(ymin = ci_l, ymax = ci_h, color = sig), width = .2, linewidth = .5) +
geom_point(aes(color = sig), size = .5) +
geom_text(data = stats, aes(label=label), size = 3, hjust = 0) +
scale_color_manual(values = colors) +
labs(
x = 'Participant',
y = 'Within-participant correlation with subjective arousal',
color = ''
) +
scale_x_reordered() +
scale_y_continuous(breaks = c(-1, 0, 1), labels = c(-1, 0, 1), limits = c(-1, 1)) +
coord_flip() +
facet_wrap(~metric, scales = 'free', ncol = 3) +
theme_bw() +
theme(axis.ticks = element_blank(),
axis.text.y = element_blank(),
strip.background = element_rect(fill = NA),
panel.grid = element_blank(),
legend.position = c(.39, .3),
legend.key.size = unit(.2, 'cm'),
legend.text = element_text(size = 8),
legend.spacing.y = unit(0, 'pt'),
legend.title = element_blank(),
text = element_text(size = 14))
p3
library(ggpubr)
source('visualize_clusters.r')
m <- readRDS('cluster_result.rds')
source("~/Dropbox/post_doc/professional/career/site_stuff/next/content/post/hep/visualize_clusters.r")
setwd('content/post/hep')
m <- readRDS('cluster_result.rds')
library(ggpubr)
source('visualize_clusters.r')
m <- readRDS('cluster_result.rds')
cluster_id <- which(m$result$p_values < .05)
topo <- plot_topo(m, cluster_id, n_breaks = 1, nrow = 1)
source("~/Dropbox/post_doc/professional/career/site_stuff/next/content/post/hep/visualize_clusters.r")
library(tidyverse)
library(ggridges)
library(RColorBrewer)
library(BayesFactor)
library(scales)
library(tidytext)
knitr::opts_chunk$set(collapse = TRUE, cache=FALSE, out.width="100%")
knitr::include_graphics("distraction.png")
knitr::include_graphics('eeg_cap.jpg')
knitr::include_graphics('figure1.png')
# Import data
d <- read.csv('MW_EEG_behavioral.csv')
bads <- c(10, 13, 14)
d <- d[!d$subject %in% bads,]
ecg <- read.csv('MW_ECG_summary.csv')
# Mean imputation on very few missing values
d <- d %>%
group_by(subject) %>%
# Mean imputation
mutate(trial = 1:(n()), arou = ifelse(!is.na(arou), arou, mean(arou, na.rm=TRUE))) %>%
ungroup() %>%
select(subject, trial, arou, fut)
# Summarize heart metric
heart <- ecg %>%
rename(trial = probe) %>%
mutate(trial = as.integer(gsub('Probe', '', trial)),
timepoint = sample / 250) %>%
mutate(hr = 60 / (timepoint - lag(timepoint))) %>%
group_by(subject, trial) %>%
summarize(hr = mean(hr, na.rm=TRUE)) %>%
inner_join(d)
# Compute summaries for viz
sd <- heart %>%
gather(metric, measure, hr, fut) %>%
group_by(subject, metric) %>%
summarize(r = cor.test(measure, arou)$estimate,
ci_l = cor.test(measure, arou)$conf.int[1],
ci_h = cor.test(measure, arou)$conf.int[2],
p = cor.test(measure, arou)$p.value) %>%
mutate(sig = case_when(
p < .001 ~ 'p < .001',
p < .01 ~ 'p < .01',
p < .05 ~ 'p < .05',
p >= .05 ~ 'N.S.'
)) %>%
mutate(sig = factor(sig, levels = c('N.S.', 'p < .05', 'p < .01', 'p < .001')))
# ---  COMPUTE AGGREGATE STATS --- #
# Use Fisher Z to transform correlations to unbounded space
fisherz <- function(r) {
return(0.5 * log((1 + r) / (1 - r)))
}
sd$z <- fisherz(sd$r)
N <- length(unique(sd$subject))
# Aggregate correlation statistics
stats <- sd %>%
group_by(metric) %>%
summarize(m = mean(r), se = sd(r) / sqrt(N), t = t.test(r, mu=0)$statistic,
df = t.test(r, mu=0)$parameter, p = t.test(r, mu=0)$p.value,
bf =  (extractBF(ttestBF(r, mu=0))$bf)) %>%
mutate(p_code = ifelse(p < .001, '< .001', paste0('= ', round(p, 3))),
bf = ifelse(metric=='fut', bf, 1 / bf)) %>%
mutate(r = -1, subject = c(1, 24),
label = paste0('p ', p_code, c('\nBF Alt = ', '\nBF Null = '), round(bf, 2)))
metric_order <- c('hr', 'fut')
stats$metric <- factor(stats$metric, levels = metric_order)
stats$metric <- recode(stats$metric, `hr` = 'Heart rate', `fut` = 'Future thinking')
colors <- brewer_pal(palette = 'RdBu')(10)[c(1, 10, 8, 6)]
# Visualize
p3 <- sd %>%
mutate(metric = factor(metric, levels = metric_order)) %>%
mutate(metric = recode(metric, `hr` = 'Heart rate', `fut` = 'Future thinking')) %>%
ggplot(aes(x = reorder_within(subject, r, metric), y = r)) +
geom_hline(yintercept = 0, linetype = 'dashed') +
geom_errorbar(aes(ymin = ci_l, ymax = ci_h, color = sig), width = .2, linewidth = .5) +
geom_point(aes(color = sig), size = .5) +
geom_text(data = stats, aes(label=label), size = 3, hjust = 0) +
scale_color_manual(values = colors) +
labs(
x = 'Participant',
y = 'Within-participant correlation with subjective arousal',
color = ''
) +
scale_x_reordered() +
scale_y_continuous(breaks = c(-1, 0, 1), labels = c(-1, 0, 1), limits = c(-1, 1)) +
coord_flip() +
facet_wrap(~metric, scales = 'free', ncol = 3) +
theme_bw() +
theme(axis.ticks = element_blank(),
axis.text.y = element_blank(),
strip.background = element_rect(fill = NA),
panel.grid = element_blank(),
legend.position = c(.39, .3),
legend.key.size = unit(.2, 'cm'),
legend.text = element_text(size = 8),
legend.spacing.y = unit(0, 'pt'),
legend.title = element_blank(),
text = element_text(size = 14))
p3
library(ggpubr)
source('visualize_clusters.r')
q()
